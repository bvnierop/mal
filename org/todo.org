#+TODO: TODO(t) DOING(n) | DONE(d)

* Csharp
** DONE Clone repo
** DONE Set up projectile
Note: Needs ~hybrid~ indexing
** DONE Get to something testable (according to the guide)
** DONE Step 0: The REPL
*** DONE Basics
*** DONE Add line editing support
** DOING Step 1: Read and Print
*** DONE Copy step0 project to step1 project
*** DONE Add a file: reader.cs
*** DONE Create a reader object (stateful)
With methods ~next~ and ~peek~. ~next~ returns the current token and increments
position. ~peek~ just returns the token.
*** DONE Create a function ~read_str~
It'll call tokenize and then instantiate a ~Reader~ object.
*** DONE Create a function ~tokenize~
It'll tokenize the input, using this regular expression (according to the
guide):
~/[\s,]*(~@|[\[\]{}()'`~^@]|"(?:\\.|[^\\"])*"?|;.*|[^\s\[\]{}('"`,;)]*)/~
*** DONE Add a file: types.cs
*** DONE Add a function ~read_form~
~read_form~ peeks at the first token of the given ~Reader~ object and calls
either ~read_list~ or ~read_atom~ based on that token. It returns a mal type.
*** DONE Add a function ~read_list~
This calls ~read_form~ repeatedly until a closing brace is encountered. If none
is encountered, that's an error.
*** DONE Add a function ~read_atom~
This reads everything that isn't a list.

*** DONE Add a file: printer.cs
Containing a single function: ~pr_str~. It takes a mal data type and returns the
string representation:
- For a list, call ~pr_str~ on each element, surround by braces.
- For a number, return it's string representation.
- For everything else, return the name as string.
*** DONE Link lib to step1 project
*** DONE Hook it all up
*** TODO Deferrable
**** Add support for other basic data types
***** nil
***** true
***** false
***** string
#+begin_quote
When a string is read, the following transformations are applied: a backslash
followed by a doublequote is translated into a plain doublequote character, a
backslash followed by "n" is translated into a newline, and a backslash followed
by another backslash is translated into a single backslash. To properly print a
string (for step 4 string functions), the pr_str function needs another
parameter called print_readably. When print_readably is true, doublequotes,
newlines, and backslashes are translated into their printed representations (the
reverse of the reader). The PRINT function in the main program should call
pr_str with print_readably set to true.
#+end_quote

**** Add error checking for matched parens
Already have this for ~()~, but not for the other brace styles: ~{}~, ~[]~.
This will come automagically as I build support for the data types they
represent.
**** Add support for reader macros
See [[file:~/projects/mal/tests/step1_read_print.mal][the test file]] for the format these macros have.
**** Add support for other mal types
***** keyword
#+begin_quote
a keyword is a token that begins with a colon. A keyword can just be stored as a
string with special unicode prefix like 0x29E (or char 0xff/127 if the target
language does not have good unicode support) and the printer translates strings
with that prefix back to the keyword representation. This makes it easy to use
keywords as hash map keys in most languages. You can also store keywords as a
unique data type, but you will need to make sure they can be used as hash map
keys (which may involve doing a similar prefixed translation anyways).
#+end_quote
***** vector
#+begin_quote
a vector can be implemented with same underlying type as a list as long as there
is some mechanism to keep track of the difference. Vector literals are similar
to lists, but use bracket as delimiters instead of parenthesis. For example, []
constructs an empty vector and [1 "a"] a vector with two elements. You can use
the same reader function for both lists and vectors by adding parameters for the
starting and ending tokens.
#+end_quote

I disagree partially with the above. I am going to store vectors as arrays that
are mutable in size.
***** hash-map
#+begin_quote
a hash-map is an associative data structure that maps strings to other mal
values. If you implement keywords as prefixed strings, then you only need a
native associative data structure which supports string keys. Clojure allows any
value to be a hash map key, but the base functionality in mal is to support
strings and keyword keys. Hash-map literals are constructed with braces
delimiters. For example, {} constructs an empty map, {"a" 1 :b "whatever"}
associates the a key to an integer value and the :b key to a string
value. Because of the representation of hash-maps as an alternating sequence of
keys and values, you can probably use the same reader function for hash-maps as
lists and vectors with parameters to indicate the starting and ending
tokens. The odd tokens are then used for keys with the corresponding even tokens
as the values.
#+end_quote
**** Add comment support
#+begin_quote
The tokenizer should ignore tokens that start with ";". Your read_str function
will need to properly handle when the tokenizer returns no values. The simplest
way to do this is to return nil mal value. A cleaner option (that does not print
nil at the prompt is to throw a special exception that causes the main loop to
simply continue at the beginning of the loop without calling rep.
#+end_quote
*** TODO Extract some things to a library
**** ReadLine
**** Types
**** Reader

*** TODO Remove string ctor from MalType
** Personal tasks
*** TODO Make the reader object stateless
*** TODO Fix namespaces
A namespace like ~step0_repl~ is just ugly as hell.

*** TODO Pretty printing
